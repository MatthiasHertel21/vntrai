#!/usr/bin/env python3
"""
Test script for Request 19 implementation
Tests the new execute function with OpenAI Assistant integration
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.routes.agents.streaming_api import build_context_prompt, render_response_content

def test_build_context_prompt():
    """Test the context prompt building function"""
    print("Testing build_context_prompt function...")
    
    # Sample task definition
    task_def = {
        'name': 'Test Task',
        'description': 'This is a test task',
        'type': 'ai',
        'ai_config': {
            'system_prompt': 'You are a helpful assistant.',
            'model': 'gpt-4',
            'temperature': 0.7
        },
        'output': {
            'type': 'markdown',
            'description': 'Provide a markdown formatted response'
        }
    }
    
    # Sample task inputs
    task_inputs = {
        'topic': 'Python programming',
        'level': 'beginner'
    }
    
    # Sample agent data
    agent = {
        'name': 'Code Assistant',
        'description': 'An AI assistant specialized in programming help',
        'knowledge_base': [
            {
                'title': 'Python Basics',
                'content': 'Python is a high-level programming language...'
            }
        ]
    }
    
    # Build context prompt
    prompt = build_context_prompt(task_def, task_inputs, agent)
    
    print("Generated Context Prompt:")
    print("=" * 50)
    print(prompt)
    print("=" * 50)
    
    # Verify prompt contains expected elements
    assert 'Code Assistant' in prompt
    assert 'Test Task' in prompt
    assert 'Python programming' in prompt
    assert 'markdown' in prompt.lower()
    assert 'helpful assistant' in prompt.lower()
    
    print("‚úÖ Context prompt test passed!")
    return prompt

def test_render_response_content():
    """Test the response content rendering function"""
    print("\nTesting render_response_content function...")
    
    # Test markdown rendering
    markdown_content = "# Hello World\n\nThis is **bold** text."
    html_output = render_response_content(markdown_content, 'markdown')
    
    print("Markdown rendering:")
    print(html_output)
    assert 'markdown-content' in html_output
    assert '# Hello World' in html_output
    
    # Test HTML rendering
    html_content = "<h1>Hello World</h1><p>This is <strong>bold</strong> text.</p>"
    html_output = render_response_content(html_content, 'html')
    
    print("\nHTML rendering:")
    print(html_output)
    assert html_content in html_output
    
    # Test text rendering
    text_content = "Hello World\n\nThis is plain text."
    html_output = render_response_content(text_content, 'text')
    
    print("\nText rendering:")
    print(html_output)
    assert 'text-content' in html_output
    assert 'Hello World' in html_output
    
    print("‚úÖ Response rendering test passed!")

def test_integration_readiness():
    """Test if all required components are available"""
    print("\nTesting integration readiness...")
    
    try:
        from app.implementation_modules.openai_assistant_api import OpenAIAssistantAPIImplementation
        print("‚úÖ OpenAI Assistant API implementation available")
    except ImportError as e:
        print(f"‚ùå OpenAI Assistant API implementation not available: {e}")
        return False
    
    try:
        from app.utils.data_manager import agent_run_manager, agents_manager
        print("‚úÖ Data managers available")
    except ImportError as e:
        print(f"‚ùå Data managers not available: {e}")
        return False
    
    return True

if __name__ == '__main__':
    print("Testing Request 19 Implementation")
    print("=" * 40)
    
    # Test the helper functions
    prompt = test_build_context_prompt()
    test_render_response_content()
    
    # Test integration readiness
    if test_integration_readiness():
        print("\nüéâ All tests passed! Implementation is ready.")
        print("\nKey Features Implemented:")
        print("- ‚úÖ Context prompt generation from task definition, inputs, and agent data")
        print("- ‚úÖ Response content rendering for different output types (text, markdown, html)")
        print("- ‚úÖ OpenAI Assistant API integration with user session management")
        print("- ‚úÖ Real-time HTML streaming with execution status")
        print("- ‚úÖ Result storage in AgentRun JSON with both HTML and raw response")
        print("- ‚úÖ Error handling and status management")
        
        print("\nTo test the full functionality:")
        print("1. Start the Flask application")
        print("2. Navigate to an agent run page (/agents/<uuid>/runs/<uuid>)")
        print("3. Select an AI task and click the Execute button")
        print("4. The new implementation will create a user session and execute the task")
    else:
        print("\n‚ùå Some dependencies are missing. Check the error messages above.")
